{"version":3,"file":"static/js/972.fad09b34.chunk.js","mappings":"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","sources":["pages/contacts/SkipInbox.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { supabase } from '../../lib/supabaseClient';\nimport { AgGridReact } from '../../ag-grid-setup';\nimport { FiUser, FiCalendar, FiCheckCircle, FiXCircle, FiPhone, FiMail, FiMessageCircle } from 'react-icons/fi';\n\n// Styled components\nconst Container = styled.div`\n  padding: 10px 0 0 0; /* Add just a bit of top padding */\n  min-height: 100vh; /* Full viewport height */\n  height: auto;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  \n  .clickable-cell {\n    cursor: default;\n  }\n  \n  .name-cell-clickable {\n    cursor: pointer;\n  }\n  \n  .ag-row {\n    cursor: default;\n  }\n  \n  .phone-link, .email-link {\n    z-index: 100;\n    position: relative;\n  }\n  \n  .phone-link:hover, .email-link:hover {\n    color: #00ff00 !important;\n    text-decoration: underline;\n    background-color: rgba(0, 255, 0, 0.1);\n  }\n`;\n\nconst ErrorText = styled.div`\n  color: #ff3333;\n  background-color: #330000;\n  padding: 15px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n`;\n\nconst LoadingContainer = styled.div`\n  color: #00ff00;\n  text-align: center;\n  padding: 40px;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 400px;\n`;\n\nconst LoadingBar = styled.div`\n  width: 300px;\n  height: 8px;\n  background-color: #111;\n  margin: 20px 0;\n  border-radius: 4px;\n  overflow: hidden;\n  position: relative;\n  box-shadow: 0 0 10px rgba(0, 255, 0, 0.2);\n  \n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 30%;\n    background-color: #00ff00;\n    animation: pulse 1.5s ease-in-out infinite;\n    box-shadow: 0 0 20px #00ff00;\n    border-radius: 4px;\n  }\n  \n  @keyframes pulse {\n    0% {\n      left: -30%;\n      opacity: 0.8;\n    }\n    100% {\n      left: 100%;\n      opacity: 0.2;\n    }\n  }\n`;\n\nconst LoadingText = styled.div`\n  margin-top: 15px;\n  color: #00ff00;\n  text-shadow: 0 0 5px rgba(0, 255, 0, 0.5);\n  letter-spacing: 1px;\n  font-size: 16px;\n  opacity: 0.9;\n  animation: blink 1.5s ease-in-out infinite alternate;\n  \n  @keyframes blink {\n    from { opacity: 0.6; }\n    to { opacity: 1; }\n  }\n`;\n\nconst LoadingMatrix = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n  color: #00ff00;\n  text-align: center;\n  margin-top: 30px;\n  height: 100px;\n  width: 300px;\n  overflow: hidden;\n  position: relative;\n  \n  &:after {\n    content: \"01001100 01101111 01100001 01100100 01101001 01101110 01100111 00100000 01000011 01101111 01101110 01110100 01100001 01100011 01110100 01110011 00101110 00101110 00101110\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(to bottom, transparent, #000 80%);\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    opacity: 0.7;\n    text-shadow: 0 0 5px #00ff00;\n    animation: matrix 5s linear infinite;\n  }\n  \n  @keyframes matrix {\n    0% { transform: translateY(-60px); }\n    100% { transform: translateY(60px); }\n  }\n`;\n\n// Modal components for messages\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n`;\n\nconst ModalContent = styled.div`\n  background-color: #121212;\n  border-radius: 8px;\n  border: 1px solid #333;\n  width: 90%;\n  max-width: 700px;\n  max-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.5);\n  overflow: hidden;\n`;\n\nconst ModalHeader = styled.div`\n  padding: 15px 20px;\n  border-bottom: 1px solid #333;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ModalTitle = styled.h3`\n  color: #00ff00;\n  margin: 0;\n  font-size: 1.2rem;\n  font-family: 'Courier New', monospace;\n  display: flex;\n  align-items: center;\n`;\n\nconst ModalCloseButton = styled.button`\n  background: none;\n  border: none;\n  color: #999;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  &:hover {\n    color: #fff;\n  }\n`;\n\nconst ModalBody = styled.div`\n  padding: 20px;\n  overflow-y: auto;\n  flex: 1;\n  color: #cccccc;\n  font-family: 'Courier New', monospace;\n`;\n\nconst MessageDate = styled.div`\n  color: #888;\n  font-size: 0.9rem;\n  margin-top: 10px;\n  text-align: right;\n`;\n\nconst MessageContent = styled.div`\n  background-color: #1a1a1a;\n  border-radius: 8px;\n  padding: 15px;\n  margin-top: 15px;\n  white-space: pre-wrap;\n  word-break: break-word;\n  line-height: 1.5;\n`;\n\nconst MessageInfo = styled.div`\n  margin-bottom: 15px;\n  display: flex;\n  align-items: center;\n  \n  & > svg {\n    margin-right: 10px;\n    color: #00ff00;\n  }\n`;\n\nconst SkipInbox = () => {\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [gridApi, setGridApi] = useState(null);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [showGrid, setShowGrid] = useState(false);\n  \n  const navigate = useNavigate();\n  \n  // Simpler name formatter function\n  const formatName = (params) => {\n    if (!params.data) return '';\n    const firstName = params.data.first_name || '';\n    const lastName = params.data.last_name || '';\n    return `${firstName} ${lastName}`.trim() || '(No name)';\n  };\n  \n  // React cell renderer for name column\n  const NameCellRenderer = (props) => {\n    const navigate = useNavigate();\n    const value = props.valueFormatted || props.value || '';\n\n    const handleClick = (e) => {\n      e.stopPropagation();\n      if (props.data && props.data.contact_id) {\n        // Navigate to ContactCrmWorkflow page when clicking on a name\n        navigate(`/contacts/workflow/${props.data.contact_id}`);\n      }\n    };\n\n    return (\n      <div\n        className=\"name-link\"\n        style={{ color: '#00ff00', cursor: 'pointer', textDecoration: 'underline' }}\n        onClick={handleClick}\n      >\n        {value}\n      </div>\n    );\n  };\n\n  // Cell renderer for action buttons with improved event handling\n  const ActionCellRenderer = (props) => {\n    // Create refs to store references to the buttons\n    const spamButtonRef = React.useRef(null);\n    const crmButtonRef = React.useRef(null);\n    \n    React.useEffect(() => {\n      // Get the buttons from refs after render\n      const spamButton = spamButtonRef.current;\n      const crmButton = crmButtonRef.current;\n      \n      if (!spamButton || !crmButton) return;\n      \n      // Function to handle spam button click with complete event isolation\n      const spamClickHandler = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        \n        // Delay the actual action just to be sure all event bubbling is done\n        setTimeout(() => {\n          handleMarkAsSpam(props.data);\n        }, 10);\n        \n        return false;\n      };\n      \n      // Function to handle add to CRM button click with complete event isolation\n      const crmClickHandler = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        \n        // Delay the actual action just to be sure all event bubbling is done\n        setTimeout(() => {\n          handleAddToCRM(props.data);\n        }, 10);\n        \n        return false;\n      };\n      \n      // Add the click handlers to all buttons\n      spamButton.addEventListener('click', spamClickHandler, true);\n      crmButton.addEventListener('click', crmClickHandler, true);\n      \n      // Cleanup - remove handlers when component unmounts\n      return () => {\n        spamButton.removeEventListener('click', spamClickHandler, true);\n        crmButton.removeEventListener('click', crmClickHandler, true);\n      };\n    }, [props.data]);\n    \n    return (\n      <div\n        className=\"action-buttons-container\"\n        style={{ \n          display: 'flex', \n          justifyContent: 'center',\n          alignItems: 'center',\n          paddingTop: '4px',\n          paddingBottom: '0px',\n          height: '100%'\n        }}\n        // This is critical - stop propagation at the container level too\n        onClick={(e) => { \n          e.stopPropagation(); \n          e.preventDefault();\n        }}\n      >\n        <div \n          ref={spamButtonRef}\n          style={{\n            backgroundColor: '#333',\n            color: '#ff5555',\n            border: '1px solid #ff5555',\n            borderRadius: '4px',\n            padding: '5px 10px',\n            margin: '0 8px',\n            cursor: 'pointer',\n            display: 'inline-flex',\n            alignItems: 'center',\n            gap: '6px',\n            fontSize: '12px',\n            height: '24px'\n          }}\n        >\n          <FiXCircle /> Spam\n        </div>\n        \n        <div \n          ref={crmButtonRef}\n          style={{\n            backgroundColor: '#333',\n            color: '#55ff55',\n            border: '1px solid #55ff55',\n            borderRadius: '4px',\n            padding: '5px 10px',\n            margin: '0 8px',\n            cursor: 'pointer',\n            display: 'inline-flex',\n            alignItems: 'center',\n            gap: '6px',\n            fontSize: '12px',\n            height: '24px'\n          }}\n        >\n          <FiCheckCircle /> Add to CRM\n        </div>\n      </div>\n    );\n  };\n\n  // WhatsApp Message Modal Component\n  const WhatsAppModal = ({ message, onClose }) => {\n    if (!message) return null;\n    \n    return (\n      <ModalOverlay onClick={onClose}>\n        <ModalContent onClick={(e) => e.stopPropagation()}>\n          <ModalHeader>\n            <ModalTitle>\n              <FiPhone style={{ marginRight: '10px' }} /> WhatsApp Message\n            </ModalTitle>\n            <ModalCloseButton onClick={onClose}>×</ModalCloseButton>\n          </ModalHeader>\n          <ModalBody>\n            <MessageInfo>\n              <FiPhone /> From: {message.mobile_number}\n            </MessageInfo>\n            <MessageContent>\n              {message.message}\n            </MessageContent>\n            <MessageDate>\n              Received: {new Date(message.created_at).toLocaleString()}\n            </MessageDate>\n            \n            {message.interaction_id && (\n              <div style={{ marginTop: '20px' }}>\n                <button \n                  style={{\n                    backgroundColor: '#1a1a1a',\n                    color: '#00ff00',\n                    border: '1px solid #00ff00',\n                    borderRadius: '4px',\n                    padding: '8px 15px',\n                    cursor: 'pointer',\n                    fontFamily: 'Courier New, monospace'\n                  }}\n                  onClick={() => {\n                    if (message.contact_id) {\n                      sessionStorage.setItem('workflow_contact_id', message.contact_id);\n                      window.location.href = `/contacts/workflow/${message.contact_id}`;\n                    }\n                    onClose();\n                  }}\n                >\n                  View Full Conversation History\n                </button>\n              </div>\n            )}\n          </ModalBody>\n        </ModalContent>\n      </ModalOverlay>\n    );\n  };\n  \n  // Email Message Modal Component\n  const EmailModal = ({ email, onClose }) => {\n    if (!email) return null;\n    \n    return (\n      <ModalOverlay onClick={onClose}>\n        <ModalContent onClick={(e) => e.stopPropagation()}>\n          <ModalHeader>\n            <ModalTitle>\n              <FiMail style={{ marginRight: '10px' }} /> Email Message\n            </ModalTitle>\n            <ModalCloseButton onClick={onClose}>×</ModalCloseButton>\n          </ModalHeader>\n          <ModalBody>\n            <MessageInfo>\n              <FiMail /> From: {email.email_address}\n            </MessageInfo>\n            <div style={{ marginTop: '10px' }}>\n              <strong>Subject:</strong> {email.subject || '(No Subject)'}\n              {email.has_attachments && (\n                <span style={{ marginLeft: '10px', color: '#aaa', fontSize: '0.9em' }}>\n                  ({email.attachment_count || 1} attachment{email.attachment_count > 1 ? 's' : ''})\n                </span>\n              )}\n            </div>\n            <MessageContent>\n              {email.body}\n            </MessageContent>\n            <MessageDate>\n              {email.direction === 'outgoing' ? 'Sent: ' : 'Received: '} \n              {new Date(email.created_at).toLocaleString()}\n            </MessageDate>\n            \n            {(email.interaction_id || email.email_id || email.email_thread_id) && (\n              <div style={{ marginTop: '20px', display: 'flex', gap: '10px' }}>\n                <button \n                  style={{\n                    backgroundColor: '#1a1a1a',\n                    color: '#00ff00',\n                    border: '1px solid #00ff00',\n                    borderRadius: '4px',\n                    padding: '8px 15px',\n                    cursor: 'pointer',\n                    fontFamily: 'Courier New, monospace'\n                  }}\n                  onClick={() => {\n                    if (email.contact_id) {\n                      sessionStorage.setItem('workflow_contact_id', email.contact_id);\n                      window.location.href = `/contacts/workflow/${email.contact_id}`;\n                    }\n                    onClose();\n                  }}\n                >\n                  View Contact History\n                </button>\n                \n                {email.email_thread_id && (\n                  <button \n                    style={{\n                      backgroundColor: '#1a1a1a',\n                      color: '#5599ff',\n                      border: '1px solid #5599ff',\n                      borderRadius: '4px',\n                      padding: '8px 15px',\n                      cursor: 'pointer',\n                      fontFamily: 'Courier New, monospace'\n                    }}\n                    onClick={() => {\n                      // Navigate to email thread view\n                      alert('Email thread view is not implemented yet');\n                      // Future implementation could use something like:\n                      // window.location.href = `/emails/thread/${email.email_thread_id}`;\n                    }}\n                  >\n                    View Thread\n                  </button>\n                )}\n              </div>\n            )}\n          </ModalBody>\n        </ModalContent>\n      </ModalOverlay>\n    );\n  };\n\n  // State for modals\n  const [whatsappMessage, setWhatsappMessage] = useState(null);\n  const [emailMessage, setEmailMessage] = useState(null);\n  \n  // Handler for mobile phone number click to view whatsapp messages\n  const handleViewWhatsappMessage = async (mobile, contactId) => {\n    if (!mobile || mobile === '-') return;\n    \n    try {\n      let queryContactId = contactId;\n      \n      // If no contactId was provided, look it up from mobile number\n      if (!queryContactId) {\n        const { data: mobileData, error: mobileError } = await supabase\n          .from('contact_mobiles')\n          .select('contact_id')\n          .eq('mobile', mobile)\n          .limit(1);\n        \n        if (mobileError) throw mobileError;\n        \n        if (!mobileData || mobileData.length === 0) {\n          alert(`Could not find contact associated with ${mobile}`);\n          return;\n        }\n        \n        queryContactId = mobileData[0].contact_id;\n      }\n      \n      // Find the latest WhatsApp interaction for this contact\n      // Get the chat ID first if possible\n      const { data: contactChats, error: chatError } = await supabase\n        .from('contact_chats')\n        .select('chat_id')\n        .eq('contact_id', queryContactId);\n      \n      if (chatError) throw chatError;\n      \n      let interactions = [];\n      \n      // If we found chat associations, get interactions for those chats\n      if (contactChats && contactChats.length > 0) {\n        const chatIds = contactChats.map(cc => cc.chat_id).filter(Boolean);\n        \n        if (chatIds.length > 0) {\n          // Get interactions for these chat IDs\n          const { data: chatInteractions, error: interactionsError } = await supabase\n            .from('interactions')\n            .select(`\n              interaction_id,\n              interaction_date,\n              summary,\n              chat_id,\n              contact_id,\n              interaction_type,\n              direction\n            `)\n            .eq('contact_id', queryContactId)\n            .in('chat_id', chatIds)\n            .order('interaction_date', { ascending: false })\n            .limit(10);\n          \n          if (interactionsError) throw interactionsError;\n          \n          if (chatInteractions && chatInteractions.length > 0) {\n            interactions = chatInteractions;\n          }\n        }\n      }\n      \n      // As fallback, try to get any interaction for this contact\n      if (interactions.length === 0) {\n        const { data: directInteractions, error: directError } = await supabase\n          .from('interactions')\n          .select(`\n            interaction_id,\n            interaction_date,\n            summary,\n            chat_id,\n            contact_id,\n            interaction_type,\n            direction\n          `)\n          .eq('contact_id', queryContactId)\n          .order('interaction_date', { ascending: false })\n          .limit(5);\n        \n        if (!directError && directInteractions && directInteractions.length > 0) {\n          interactions = directInteractions;\n        }\n      }\n      \n      if (interactions && interactions.length > 0) {\n        // Find the latest WhatsApp-like interaction\n        const whatsappInteraction = interactions.find(i => \n          i.summary && (\n            i.interaction_type === 'whatsapp' || \n            i.interaction_type === 'chat' || \n            i.interaction_type === 'message'\n          )\n        ) || interactions[0];\n        \n        // Construct a message object for the modal\n        const messageData = {\n          mobile_number: mobile,\n          message: whatsappInteraction.summary || 'No message content available',\n          created_at: whatsappInteraction.interaction_date,\n          interaction_id: whatsappInteraction.interaction_id,\n          contact_id: queryContactId,\n          direction: whatsappInteraction.direction || 'incoming'\n        };\n        \n        setWhatsappMessage(messageData);\n      } else {\n        alert(`No WhatsApp messages found for ${mobile}`);\n      }\n    } catch (err) {\n      console.error('Error retrieving WhatsApp messages:', err);\n      alert('Failed to retrieve WhatsApp messages. Please try again.');\n    }\n  };\n  \n  // Handler for email click to view latest email\n  const handleViewEmailMessage = async (email, contactId) => {\n    if (!email || email === '-') return;\n    \n    try {\n      let queryContactId = contactId;\n      \n      // If no contactId was provided, look it up from email address\n      if (!queryContactId) {\n        const { data: emailData, error: emailError } = await supabase\n          .from('contact_emails')\n          .select('contact_id')\n          .eq('email', email)\n          .limit(1);\n        \n        if (emailError) throw emailError;\n        \n        if (!emailData || emailData.length === 0) {\n          alert(`Could not find contact associated with ${email}`);\n          return;\n        }\n        \n        queryContactId = emailData[0].contact_id;\n      }\n      \n      // Try first to get the latest email directly from the emails table\n      const { data: emails, error: emailsError } = await supabase\n        .from('emails')\n        .select(`\n          email_id,\n          email_thread_id,\n          subject,\n          body_plain,\n          body_html,\n          message_timestamp,\n          direction,\n          sender_contact_id,\n          thread_id,\n          has_attachments,\n          attachment_count\n        `)\n        .eq('sender_contact_id', queryContactId)\n        .order('message_timestamp', { ascending: false })\n        .limit(1);\n      \n      if (emailsError) throw emailsError;\n      \n      // If direct email found, use that\n      if (emails && emails.length > 0) {\n        const latestEmail = emails[0];\n        \n        // Get thread info if available\n        let threadSubject = latestEmail.subject;\n        if (latestEmail.email_thread_id) {\n          const { data: threadData } = await supabase\n            .from('email_threads')\n            .select('subject')\n            .eq('email_thread_id', latestEmail.email_thread_id)\n            .limit(1);\n            \n          if (threadData && threadData.length > 0) {\n            threadSubject = threadData[0].subject || threadSubject;\n          }\n        }\n        \n        // Construct an email object for the modal\n        const emailData = {\n          email_address: email,\n          subject: threadSubject || 'Email from ' + email,\n          body: latestEmail.body_plain || latestEmail.body_html || 'No email content available',\n          created_at: latestEmail.message_timestamp,\n          email_id: latestEmail.email_id,\n          email_thread_id: latestEmail.email_thread_id,\n          thread_id: latestEmail.thread_id,\n          contact_id: queryContactId,\n          direction: latestEmail.direction,\n          has_attachments: latestEmail.has_attachments,\n          attachment_count: latestEmail.attachment_count\n        };\n        \n        setEmailMessage(emailData);\n        return;\n      }\n      \n      // Fallback to interactions table if no direct emails found\n      const { data: interactions, error: interactionsError } = await supabase\n        .from('interactions')\n        .select(`\n          interaction_id,\n          interaction_date,\n          summary,\n          contact_id,\n          interaction_type,\n          direction,\n          email_thread_id\n        `)\n        .eq('contact_id', queryContactId)\n        .order('interaction_date', { ascending: false })\n        .limit(5);\n      \n      if (interactionsError) throw interactionsError;\n      \n      if (interactions && interactions.length > 0) {\n        // Find the latest email interaction if possible\n        const emailInteraction = interactions.find(i => \n          i.summary && (\n            i.interaction_type === 'email' || \n            i.email_thread_id ||\n            (i.summary && i.summary.includes('@'))\n          )\n        ) || interactions[0];\n        \n        // Construct an email object for the modal\n        const emailData = {\n          email_address: email,\n          subject: emailInteraction.email_thread_id ? \n            `Email thread: ${emailInteraction.email_thread_id}` : \n            'Email from ' + email,\n          body: emailInteraction.summary || 'No email content available',\n          created_at: emailInteraction.interaction_date,\n          interaction_id: emailInteraction.interaction_id,\n          contact_id: queryContactId,\n          direction: emailInteraction.direction || 'incoming'\n        };\n        \n        setEmailMessage(emailData);\n      } else {\n        alert(`No emails found for ${email}`);\n      }\n    } catch (err) {\n      console.error('Error retrieving emails:', err);\n      alert('Failed to retrieve emails. Please try again.');\n    }\n  };\n\n  // Handler for marking a contact as spam\n  const handleMarkAsSpam = async (contact) => {\n    if (!contact || !contact.contact_id) return;\n    \n    try {\n      // Update the contact record \n      const { error } = await supabase\n        .from('contacts')\n        .update({ \n          category: 'Spam',\n          last_modified_at: new Date().toISOString(),\n          last_modified_by: 'User'\n        })\n        .eq('contact_id', contact.contact_id);\n      \n      if (error) throw error;\n      \n      // Remove the contact from the displayed list\n      const updatedContacts = contacts.filter(c => c.contact_id !== contact.contact_id);\n      setContacts(updatedContacts);\n      \n      // Check if we need to refresh the data\n      if (updatedContacts.length === 0) {\n        // Trigger a refresh to get more data\n        setDataLoaded(false);\n      }\n    } catch (err) {\n      console.error('Error marking contact as spam:', err);\n      alert('Failed to mark contact as spam. Please try again.');\n    }\n  };\n  \n  // Handler for adding a contact to CRM\n  const handleAddToCRM = async (contact) => {\n    if (!contact || !contact.contact_id) return;\n    \n    try {\n      // Update the contact record\n      const { error } = await supabase\n        .from('contacts')\n        .update({ \n          category: 'Inbox',\n          last_modified_at: new Date().toISOString(),\n          last_modified_by: 'User'\n        })\n        .eq('contact_id', contact.contact_id);\n      \n      if (error) throw error;\n      \n      // Remove the contact from the displayed list\n      const updatedContacts = contacts.filter(c => c.contact_id !== contact.contact_id);\n      setContacts(updatedContacts);\n      \n      // Check if we need to refresh the data\n      if (updatedContacts.length === 0) {\n        // Trigger a refresh to get more data\n        setDataLoaded(false);\n      }\n    } catch (err) {\n      console.error('Error adding contact to CRM:', err);\n      alert('Failed to add contact to CRM. Please try again.');\n    }\n  };\n  \n  // Mobile cell renderer with click functionality\n  const MobileCellRenderer = (props) => {\n    const value = props.value || '-';\n    // Create a ref to access the DOM element\n    const cellRef = React.useRef(null);\n    \n    // Add a more robust click handling on mount\n    React.useEffect(() => {\n      // Skip effect if no value or no ref element\n      if (value === '-' || !cellRef.current) return;\n      \n      const handleCellClick = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        \n        // Delay to make sure all propagation is stopped\n        setTimeout(() => {\n          handleViewWhatsappMessage(value, props.data?.contact_id);\n        }, 10);\n        \n        return false;\n      };\n      \n      // Add the event listener\n      const cell = cellRef.current;\n      cell.addEventListener('click', handleCellClick, true);\n      \n      // Cleanup\n      return () => {\n        cell.removeEventListener('click', handleCellClick, true);\n      };\n    }, [value, props.data?.contact_id]);\n    \n    // Return a simple dash for empty values\n    if (value === '-') return value;\n    \n    return (\n      <div \n        ref={cellRef}\n        className=\"phone-link\"\n        style={{ \n          color: '#cccccc', \n          cursor: 'pointer',\n          textDecoration: 'underline',\n          position: 'relative',\n          zIndex: 10\n        }}\n        title=\"Click to view latest WhatsApp message\"\n      >\n        <FiPhone style={{ marginRight: '5px', color: '#55ff55' }} />\n        {value}\n      </div>\n    );\n  };\n  \n  // Email cell renderer with click functionality\n  const EmailCellRenderer = (props) => {\n    const value = props.value || '-';\n    // Create a ref to access the DOM element\n    const cellRef = React.useRef(null);\n    \n    // Add a more robust click handling on mount\n    React.useEffect(() => {\n      // Skip effect if no value or no ref element\n      if (value === '-' || !cellRef.current) return;\n      \n      const handleCellClick = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        \n        // Delay to make sure all propagation is stopped\n        setTimeout(() => {\n          handleViewEmailMessage(value, props.data?.contact_id);\n        }, 10);\n        \n        return false;\n      };\n      \n      // Add the event listener\n      const cell = cellRef.current;\n      cell.addEventListener('click', handleCellClick, true);\n      \n      // Cleanup\n      return () => {\n        cell.removeEventListener('click', handleCellClick, true);\n      };\n    }, [value, props.data?.contact_id]);\n    \n    // Return a simple dash for empty values\n    if (value === '-') return value;\n    \n    return (\n      <div \n        ref={cellRef}\n        className=\"email-link\"\n        style={{ \n          color: '#cccccc', \n          cursor: 'pointer',\n          textDecoration: 'underline',\n          position: 'relative',\n          zIndex: 10 \n        }}\n        title=\"Click to view latest email\"\n      >\n        <FiMail style={{ marginRight: '5px', color: '#55ff55' }} />\n        {value}\n      </div>\n    );\n  };\n\n  // Column definitions\n  const columnDefs = useMemo(() => [\n    { \n      headerName: 'Name', \n      field: 'name',\n      valueGetter: formatName,\n      minWidth: 200,\n      filter: 'agTextColumnFilter',\n      floatingFilter: false,\n      sortable: true,\n      pinned: 'left',\n      cellClass: 'name-cell-clickable',\n      cellRenderer: NameCellRenderer\n    },\n    { \n      headerName: 'Last Interaction', \n      field: 'last_interaction_at',\n      valueFormatter: (params) => {\n        if (!params.value) return '-';\n        return new Date(params.value).toLocaleDateString();\n      },\n      minWidth: 140,\n      filter: 'agDateColumnFilter',\n      floatingFilter: false,\n      sortable: true,\n    },\n    { \n      headerName: 'Mobile', \n      field: 'mobile',\n      valueGetter: (params) => {\n        if (!params.data) return '';\n        return params.data.mobile || '-';\n      },\n      minWidth: 150,\n      filter: 'agTextColumnFilter',\n      floatingFilter: false,\n      sortable: true,\n      cellRenderer: MobileCellRenderer\n    },\n    { \n      headerName: 'Email', \n      field: 'email',\n      valueGetter: (params) => {\n        if (!params.data) return '';\n        return params.data.email || '-';\n      },\n      minWidth: 250,\n      filter: 'agTextColumnFilter',\n      floatingFilter: false,\n      sortable: true,\n      cellRenderer: EmailCellRenderer\n    },\n    {\n      headerName: 'Actions',\n      field: 'actions',\n      minWidth: 250,\n      width: 250,\n      cellRenderer: ActionCellRenderer,\n      sortable: false,\n      filter: false,\n      suppressSizeToFit: false,\n      cellClass: 'action-cell-no-click'\n    }\n  ], []);\n  \n  // Default column properties\n  const defaultColDef = useMemo(() => ({\n    resizable: true,\n    cellClass: 'clickable-cell',\n    suppressCellFocus: true\n  }), []);\n\n  // Grid ready event handler\n  const onGridReady = React.useCallback((params) => {\n    console.log('Grid is ready');\n    setGridApi(params.api);\n    \n    // Wait for a tick to ensure grid is properly initialized\n    setTimeout(() => {\n      params.api.sizeColumnsToFit();\n    }, 0);\n  }, []);\n\n  // Row clicked handler\n  const handleRowClicked = React.useCallback((params) => {\n    // Check if the click is on a phone or email cell\n    if (params.event && (params.event.target.closest('.phone-link') || params.event.target.closest('.email-link'))) {\n      // Prevent row click behavior for these cells\n      params.event.stopPropagation();\n      return;\n    }\n    \n    if (params.data && params.data.contact_id) {\n      console.log('Row clicked, navigating to workflow page', params.data);\n      navigate(`/contacts/workflow/${params.data.contact_id}`);\n    }\n  }, [navigate]);\n\n  // Fetch contacts with last interactions within the last 90 days\n  const fetchContacts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Helper function to retry failed Supabase requests\n      const retrySupabaseRequest = async (request, maxRetries = 3, delay = 1000) => {\n        let lastError;\n        for (let attempt = 0; attempt < maxRetries; attempt++) {\n          try {\n            return await request();\n          } catch (err) {\n            console.log(`Attempt ${attempt + 1} failed, retrying in ${delay}ms...`, err);\n            lastError = err;\n            // Wait before retrying\n            await new Promise(resolve => setTimeout(resolve, delay));\n            // Increase delay for next attempt (exponential backoff)\n            delay *= 1.5;\n          }\n        }\n        // If we get here, all retries failed\n        throw lastError;\n      };\n      \n      // Calculate date 90 days ago\n      const ninetyDaysAgo = new Date();\n      ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);\n      const formattedDate = ninetyDaysAgo.toISOString();\n      \n      // Get contacts count with retry\n      const { count, error: countError } = await retrySupabaseRequest(async () => {\n        return supabase\n          .from('contacts')\n          .select('*', { count: 'exact', head: true })\n          .eq('category', 'Skip')\n          .gte('last_interaction_at', formattedDate)\n          .not('last_interaction_at', 'is', null);\n      });\n        \n      if (countError) throw countError;\n      console.log(`Total Skip contacts with recent interactions: ${count}`);\n      \n      // Function to fetch contacts in batches with retry\n      const fetchBatch = async (from, to) => {\n        console.log(`Fetching batch from ${from} to ${to}`);\n        return retrySupabaseRequest(async () => {\n          return supabase\n            .from('contacts')\n            .select(`\n              contact_id, \n              first_name, \n              last_name, \n              category,\n              last_interaction_at,\n              created_at\n            `)\n            .eq('category', 'Skip')\n            .gte('last_interaction_at', formattedDate)\n            .not('last_interaction_at', 'is', null)\n            .order('last_interaction_at', { ascending: false })  // Most recent interactions first\n            .range(from, to);\n        });\n      };\n      \n      // Fetch contacts in batches\n      let allContacts = [];\n      const batchSize = 500;\n      let totalFetchedCount = 0;\n      let failedBatches = 0;\n      \n      // Limit to 4000 contacts max for performance if needed\n      const maxContacts = Math.min(count, 4000);\n      for (let i = 0; i < maxContacts; i += batchSize) {\n        try {\n          setLoading(`Loading contacts... ${Math.min(i + batchSize, count)}/${count}`);\n          \n          const { data: batchData, error: batchError } = await fetchBatch(i, i + batchSize - 1);\n          \n          if (batchError) {\n            console.error(`Error fetching contacts batch from ${i} to ${i + batchSize - 1}:`, batchError);\n            failedBatches++;\n            \n            // Continue to next batch unless too many failures\n            if (failedBatches > 3) {\n              throw new Error(`Too many failed batches (${failedBatches}). Last error: ${batchError.message}`);\n            }\n            continue;\n          }\n          \n          if (batchData && batchData.length > 0) {\n            allContacts = [...allContacts, ...batchData];\n            totalFetchedCount += batchData.length;\n          }\n        } catch (err) {\n          console.error(`Error in batch fetch loop at index ${i}:`, err);\n          // Only throw if we haven't fetched anything yet\n          if (totalFetchedCount === 0) {\n            throw err;\n          }\n          break; // Stop fetching more batches but use what we have\n        }\n      }\n      \n      console.log(`Successfully fetched ${totalFetchedCount} contacts in ${Math.ceil(totalFetchedCount/batchSize)} batches with ${failedBatches} failed batches`);\n      \n      // Get the contact data\n      const contactsData = allContacts;\n      \n      // Guard against empty results\n      if (!contactsData || contactsData.length === 0) {\n        setContacts([]);\n        setLoading(false);\n        setDataLoaded(true);\n        setShowGrid(true);\n        return;\n      }\n      \n      // Get all contact IDs to fetch related data\n      const contactIds = contactsData.map(contact => contact.contact_id).filter(Boolean);\n      \n      // Guard against empty contact IDs\n      if (contactIds.length === 0) {\n        setContacts(contactsData);\n        setLoading(false);\n        setDataLoaded(true);\n        setShowGrid(true);\n        return;\n      }\n      \n      setLoading('Loading related data (emails, mobiles)...');\n      \n      // Function to fetch related data in batches\n      const fetchRelatedDataBatch = async (entityName, query, ids, batchSize = 100) => {\n        console.log(`Fetching ${entityName} data for ${ids.length} contacts in batches of ${batchSize}`);\n        let allData = [];\n        \n        for (let i = 0; i < ids.length; i += batchSize) {\n          const batchIds = ids.slice(i, i + batchSize);\n          \n          try {\n            const { data, error } = await query.in('contact_id', batchIds);\n            \n            if (error) throw error;\n            allData = [...allData, ...(data || [])];\n            \n            // Update progress\n            setLoading(`Loading ${entityName} data... ${Math.min(i + batchSize, ids.length)}/${ids.length}`);\n          } catch (err) {\n            console.error(`Error fetching batch of ${entityName} data:`, err);\n            // Continue with next batch instead of failing completely\n          }\n        }\n        \n        return { data: allData };\n      };\n      \n      try {\n        // Fetch emails and mobiles in parallel\n        const [emailsData, mobilesData] = await Promise.all([\n          // Fetch emails (with primary flag)\n          fetchRelatedDataBatch('emails', \n            supabase.from('contact_emails').select('contact_id, email, is_primary'), \n            contactIds\n          ),\n            \n          // Fetch mobile numbers (with primary flag)\n          fetchRelatedDataBatch('mobiles', \n            supabase.from('contact_mobiles').select('contact_id, mobile, is_primary'), \n            contactIds\n          )\n        ]);\n        \n        setLoading('Processing data and preparing contacts...');\n        \n        // Map the related data to each contact\n        const contactsWithRelations = contactsData.map((contact, index) => {\n          if (!contact || !contact.contact_id) {\n            console.warn('Skipping invalid contact:', contact);\n            return null;\n          }\n          \n          // Update progress for very large data sets\n          if (index > 0 && index % 1000 === 0) {\n            setLoading(`Processing contacts... ${index}/${contactsData.length}`);\n          }\n          \n          // Find emails and mobiles for this contact\n          const contactEmails = (emailsData.data || [])\n            .filter(email => email?.contact_id === contact.contact_id);\n            \n          const contactMobiles = (mobilesData.data || [])\n            .filter(mobile => mobile?.contact_id === contact.contact_id);\n          \n          // Get primary email or first available\n          const primaryEmail = contactEmails.find(email => email?.is_primary);\n          const email = primaryEmail?.email || \n                      (contactEmails.length > 0 ? contactEmails[0]?.email : null);\n                      \n          // Get primary mobile or first available\n          const primaryMobile = contactMobiles.find(mobile => mobile?.is_primary);\n          const mobile = primaryMobile?.mobile || \n                       (contactMobiles.length > 0 ? contactMobiles[0]?.mobile : null);\n          \n          return {\n            ...contact,\n            id: contact.contact_id, // Add id as alias for contact_id for compatibility\n            email: email || null,\n            mobile: mobile || null\n          };\n        });\n        \n        // Filter out any null contacts from our processing\n        const filteredContacts = contactsWithRelations.filter(Boolean);\n        \n        console.log(`Successfully processed ${filteredContacts.length} contacts out of ${contactsData.length} total`);\n        \n        // Set the contacts with all data\n        setContacts(filteredContacts);\n        setLoading(false);\n        setDataLoaded(true);\n        \n        // Delay showing the grid to avoid abrupt transitions\n        setTimeout(() => {\n          setShowGrid(true);\n        }, 800);\n      } catch (err) {\n        console.error('Error loading related data:', err);\n        // Fallback to basic contact data if related data loading fails\n        const basicContacts = contactsData.map(contact => ({\n          ...contact,\n          id: contact.contact_id\n        }));\n        setContacts(basicContacts);\n        setLoading(false);\n        setDataLoaded(true);\n        \n        // Delay showing the grid to avoid abrupt transitions\n        setTimeout(() => {\n          setShowGrid(true);\n        }, 800);\n      }\n    } catch (err) {\n      console.error('Error fetching contacts:', err);\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  // Fetch data on component mount\n  useEffect(() => {\n    if (!dataLoaded) {\n      console.log('Initiating data fetch');\n      fetchContacts();\n    }\n  }, [dataLoaded]);\n  \n  // Handle window resize\n  useEffect(() => {\n    if (!gridApi) return;\n    \n    const handleResize = () => {\n      gridApi.sizeColumnsToFit();\n    };\n    \n    window.addEventListener('resize', handleResize, { passive: true });\n    \n    return () => {\n      window.removeEventListener('resize', handleResize, { passive: true });\n    };\n  }, [gridApi]);\n\n  return (\n    <Container>\n      {error && <ErrorText>Error: {error}</ErrorText>}\n      \n      {/* WhatsApp Message Modal */}\n      {whatsappMessage && (\n        <WhatsAppModal \n          message={whatsappMessage} \n          onClose={() => setWhatsappMessage(null)} \n        />\n      )}\n      \n      {/* Email Message Modal */}\n      {emailMessage && (\n        <EmailModal \n          email={emailMessage} \n          onClose={() => setEmailMessage(null)} \n        />\n      )}\n      \n      {loading !== false ? (\n        <LoadingContainer>\n          <LoadingText>\n            {typeof loading === 'string' \n              ? loading.replace(/Loading .+ \\d+\\/\\d+/, 'Initializing Matrix') \n              : 'Accessing Contact Database...'}\n          </LoadingText>\n          <LoadingBar />\n          <LoadingMatrix />\n        </LoadingContainer>\n      ) : !showGrid && !error ? (\n        <LoadingContainer>\n          <LoadingText>Preparing interface...</LoadingText>\n          <LoadingBar />\n          <LoadingMatrix />\n        </LoadingContainer>\n      ) : contacts.length === 0 && !error ? (\n        <div style={{ \n          padding: '40px', \n          textAlign: 'center',\n          color: '#00ff00',\n          background: '#121212',\n          borderRadius: '8px'\n        }}>\n          No 'Skip' category contacts found with interactions in the last 90 days.\n        </div>\n      ) : (\n        <div \n          className=\"ag-theme-alpine\" \n          style={{ \n            height: 'calc(100vh - 120px)', /* Adjusted for increased row height */\n            width: 'calc(100% - 30px)', /* Adjusted for left/right padding */\n            overflow: 'auto', /* Add scroll if content exceeds container */\n            margin: '15px 15px 0 15px', /* Left and right margin */\n            marginTop: '30px', /* Increased top margin */\n            opacity: showGrid ? 1 : 0,\n            transition: 'opacity 0.5s ease-in-out',\n            '--ag-background-color': '#121212',\n            '--ag-odd-row-background-color': '#1a1a1a',\n            '--ag-header-background-color': '#222222',\n            '--ag-header-foreground-color': '#00ff00',\n            '--ag-foreground-color': '#e0e0e0', \n            '--ag-row-hover-color': '#2a2a2a',\n            '--ag-border-color': '#333333'\n          }}\n        >\n          <AgGridReact\n            rowData={contacts}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            onGridReady={onGridReady}\n            onRowClicked={handleRowClicked}\n            rowSelection=\"single\"\n            animateRows={true}\n            pagination={true}\n            paginationPageSize={100} /* Show more rows per page */\n            suppressCellFocus={true}\n            enableCellTextSelection={true}\n            rowHeight={42} /* Increased row height for better spacing */\n            domLayout=\"autoHeight\"\n            paginationAutoPageSize={true} /* Auto-adjust page size to fill available height */\n            stopEditingWhenCellsLoseFocus={false}\n            suppressRowClickSelection={false}\n            sortingOrder={['asc', 'desc', null]}\n            sortModel={[\n              { colId: 'last_interaction_at', sort: 'desc' }\n            ]}\n          />\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default SkipInbox;"],"names":["Container","styled","div","ErrorText","LoadingContainer","LoadingBar","LoadingText","LoadingMatrix","ModalOverlay","ModalContent","ModalHeader","ModalTitle","h3","ModalCloseButton","button","ModalBody","MessageDate","MessageContent","MessageInfo","SkipInbox","contacts","setContacts","useState","loading","setLoading","error","setError","gridApi","setGridApi","dataLoaded","setDataLoaded","showGrid","setShowGrid","navigate","useNavigate","formatName","params","data","first_name","last_name","trim","NameCellRenderer","props","value","valueFormatted","_jsx","className","style","color","cursor","textDecoration","onClick","e","stopPropagation","contact_id","children","ActionCellRenderer","spamButtonRef","React","crmButtonRef","spamButton","current","crmButton","spamClickHandler","preventDefault","stopImmediatePropagation","setTimeout","handleMarkAsSpam","crmClickHandler","handleAddToCRM","addEventListener","removeEventListener","_jsxs","display","justifyContent","alignItems","paddingTop","paddingBottom","height","ref","backgroundColor","border","borderRadius","padding","margin","gap","fontSize","FiXCircle","FiCheckCircle","WhatsAppModal","_ref","message","onClose","FiPhone","marginRight","mobile_number","Date","created_at","toLocaleString","interaction_id","marginTop","fontFamily","sessionStorage","setItem","window","location","href","EmailModal","_ref2","email","FiMail","email_address","subject","has_attachments","marginLeft","attachment_count","body","direction","email_id","email_thread_id","alert","whatsappMessage","setWhatsappMessage","emailMessage","setEmailMessage","async","contact","supabase","from","update","category","last_modified_at","toISOString","last_modified_by","eq","updatedContacts","filter","c","length","err","console","MobileCellRenderer","_props$data2","cellRef","handleCellClick","_props$data","mobile","contactId","queryContactId","mobileData","mobileError","select","limit","contactChats","chatError","interactions","chatIds","map","cc","chat_id","Boolean","chatInteractions","interactionsError","in","order","ascending","directInteractions","directError","whatsappInteraction","find","i","summary","interaction_type","messageData","interaction_date","handleViewWhatsappMessage","cell","position","zIndex","title","EmailCellRenderer","_props$data4","_props$data3","emailData","emailError","emails","emailsError","latestEmail","threadSubject","threadData","body_plain","body_html","message_timestamp","thread_id","emailInteraction","includes","handleViewEmailMessage","columnDefs","useMemo","headerName","field","valueGetter","minWidth","floatingFilter","sortable","pinned","cellClass","cellRenderer","valueFormatter","toLocaleDateString","width","suppressSizeToFit","defaultColDef","resizable","suppressCellFocus","onGridReady","log","api","sizeColumnsToFit","handleRowClicked","event","target","closest","useEffect","retrySupabaseRequest","request","lastError","maxRetries","arguments","undefined","delay","attempt","Promise","resolve","ninetyDaysAgo","setDate","getDate","formattedDate","count","countError","head","gte","not","fetchBatch","to","range","allContacts","batchSize","totalFetchedCount","failedBatches","maxContacts","Math","min","batchData","batchError","Error","ceil","contactsData","contactIds","fetchRelatedDataBatch","entityName","query","ids","allData","batchIds","slice","emailsData","mobilesData","all","filteredContacts","index","_contactEmails$","_contactMobiles$","warn","contactEmails","contactMobiles","primaryEmail","is_primary","primaryMobile","id","basicContacts","fetchContacts","handleResize","passive","replace","overflow","opacity","transition","AgGridReact","rowData","onRowClicked","rowSelection","animateRows","pagination","paginationPageSize","enableCellTextSelection","rowHeight","domLayout","paginationAutoPageSize","stopEditingWhenCellsLoseFocus","suppressRowClickSelection","sortingOrder","sortModel","colId","sort","textAlign","background"],"sourceRoot":""}