{"version":3,"file":"static/js/647.251841e5.chunk.js","mappings":"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","sources":["pages/contacts/WhatsappInbox.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { supabase } from '../../lib/supabaseClient';\nimport { AgGridReact } from '../../ag-grid-setup';\nimport { FiCheckCircle, FiXCircle, FiArrowRight, FiArrowLeft, FiPhone, FiUser, FiCalendar, FiExternalLink, FiUsers, FiMessageCircle, FiHash } from 'react-icons/fi';\n\n// Styled components\nconst Container = styled.div`\n  padding: 15px 25px 15px 15px;\n  height: calc(100vh - 60px);\n  width: 100%;\n  display: flex;\n  \n  .action-cell-no-click {\n    z-index: 5;\n  }\n`;\n\nconst SidebarContainer = styled.div`\n  width: 15%;\n  padding-right: 15px;\n  border-right: 1px solid #333;\n`;\n\nconst MainContainer = styled.div`\n  width: 85%;\n  padding-left: 15px;\n  overflow: hidden;\n`;\n\nconst SidebarTitle = styled.h3`\n  color: #00ff00;\n  font-family: 'Courier New', monospace;\n  margin-bottom: 12px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #333;\n  font-size: 0.9rem;\n  text-transform: uppercase;\n`;\n\nconst SpamList = styled.div`\n  height: calc(100vh - 120px);\n  overflow-y: auto;\n  \n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  &::-webkit-scrollbar-track {\n    background: #121212;\n  }\n  \n  &::-webkit-scrollbar-thumb {\n    background-color: #333;\n    border-radius: 3px;\n  }\n`;\n\nconst SpamItem = styled.div`\n  padding: 6px 8px;\n  margin-bottom: 4px;\n  background-color: #1a1a1a;\n  border-radius: 3px;\n  border: 1px solid transparent;\n  font-family: 'Courier New', monospace;\n  font-size: 0.75rem;\n  color: #cccccc;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  transition: all 0.2s ease;\n  cursor: pointer;\n  \n  &:hover {\n    border-color: #00ff00;\n    background-color: #112211;\n  }\n`;\n\nconst SpamNumber = styled.span`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 75%;\n`;\n\nconst SpamCounter = styled.span`\n  background-color: #112211;\n  color: #00ff00;\n  border-radius: 10px;\n  padding: 1px 6px;\n  font-size: 0.7rem;\n  min-width: 20px;\n  text-align: center;\n  margin-left: 4px;\n`;\n\nconst ErrorText = styled.div`\n  color: #ff3333;\n  background-color: #330000;\n  padding: 15px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n`;\n\nconst LoadingContainer = styled.div`\n  color: #00ff00;\n  text-align: center;\n  padding: 40px;\n  font-family: 'Courier New', monospace;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 400px;\n`;\n\nconst LoadingBar = styled.div`\n  width: 300px;\n  height: 8px;\n  background-color: #111;\n  margin: 20px 0;\n  border-radius: 4px;\n  overflow: hidden;\n  position: relative;\n  box-shadow: 0 0 10px rgba(0, 255, 0, 0.2);\n  \n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 30%;\n    background-color: #00ff00;\n    animation: pulse 1.5s ease-in-out infinite;\n    box-shadow: 0 0 20px #00ff00;\n    border-radius: 4px;\n  }\n  \n  @keyframes pulse {\n    0% {\n      left: -30%;\n      opacity: 0.8;\n    }\n    100% {\n      left: 100%;\n      opacity: 0.2;\n    }\n  }\n`;\n\nconst LoadingText = styled.div`\n  margin-top: 15px;\n  color: #00ff00;\n  text-shadow: 0 0 5px rgba(0, 255, 0, 0.5);\n  letter-spacing: 1px;\n  font-size: 16px;\n  opacity: 0.9;\n  animation: blink 1.5s ease-in-out infinite alternate;\n  \n  @keyframes blink {\n    from { opacity: 0.6; }\n    to { opacity: 1; }\n  }\n`;\n\nconst LoadingMatrix = styled.div`\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n  color: #00ff00;\n  text-align: center;\n  margin-top: 30px;\n  height: 100px;\n  width: 300px;\n  overflow: hidden;\n  position: relative;\n  \n  &:after {\n    content: \"01001100 01101111 01100001 01100100 01101001 01101110 01100111 00100000 01010111 01101000 01100001 01110100 01110011 01100001 01110000 01110000...\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    background: linear-gradient(to bottom, transparent, #000 80%);\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    opacity: 0.7;\n    text-shadow: 0 0 5px #00ff00;\n    animation: matrix 5s linear infinite;\n  }\n  \n  @keyframes matrix {\n    0% { transform: translateY(-60px); }\n    100% { transform: translateY(60px); }\n  }\n`;\n\nconst ActionButton = styled.button`\n  background-color: ${props => props.color || 'transparent'};\n  color: ${props => props.textColor || 'white'};\n  border: 1px solid ${props => props.borderColor || 'transparent'};\n  border-radius: 4px;\n  padding: 5px 10px;\n  margin: 0 5px;\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 12px;\n  \n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\n// Contact Modal Styled Components\nconst ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n`;\n\nconst ModalContent = styled.div`\n  background-color: #121212;\n  border-radius: 8px;\n  border: 1px solid #333;\n  width: 90%;\n  max-width: 800px;\n  max-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.5);\n  overflow: hidden;\n`;\n\nconst ModalHeader = styled.div`\n  padding: 15px 20px;\n  border-bottom: 1px solid #333;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst ModalTitle = styled.h3`\n  color: #00ff00;\n  margin: 0;\n  font-size: 1.2rem;\n  font-family: 'Courier New', monospace;\n`;\n\nconst ModalCloseButton = styled.button`\n  background: none;\n  border: none;\n  color: #999;\n  font-size: 24px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  &:hover {\n    color: #fff;\n  }\n`;\n\nconst ModalBody = styled.div`\n  padding: 20px;\n  overflow-y: auto;\n  flex: 1;\n`;\n\nconst ModalFooter = styled.div`\n  padding: 15px 20px;\n  border-top: 1px solid #333;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst ContactDetails = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst ContactInfoItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  font-family: 'Courier New', monospace;\n`;\n\nconst ContactInfoLabel = styled.div`\n  color: #999;\n  width: 120px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst ContactInfoValue = styled.div`\n  color: #eee;\n  flex: 1;\n`;\n\n// Contact cell renderer with workflow link\nconst ContactCellRenderer = (props) => {\n  const contactName = props.value || 'Unknown';\n  const contactId = props.data?.contact_id;\n  \n  // Truncate contact name if longer than 50 characters\n  const displayName = contactName.length > 50 ? contactName.substring(0, 50) + '...' : contactName;\n  \n  const handleClick = (e) => {\n    e.stopPropagation();\n    if (contactId) {\n      // Store contact ID in session storage for workflow\n      sessionStorage.setItem('workflow_contact_id', contactId);\n      // Navigate to the workflow page\n      window.location.href = `/contacts/workflow/${contactId}`;\n    }\n  };\n  \n  return (\n    <div \n      style={{ \n        fontSize: '0.85rem',\n        color: '#ffffff',\n        cursor: 'pointer',\n        textDecoration: 'underline'\n      }}\n      onClick={handleClick}\n      className=\"action-cell-no-click\"\n      title={contactName} // Show full name on hover\n    >\n      {displayName}\n    </div>\n  );\n};\n\n// Custom tooltip style\nconst CustomTooltip = styled.div`\n  position: absolute;\n  top: -5px;\n  left: 0;\n  transform: translateY(-100%);\n  background-color: #222;\n  color: #fff;\n  padding: 8px;\n  border-radius: 4px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  max-width: 400px;\n  word-wrap: break-word;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.1s ease, visibility 0.1s ease;\n  font-family: 'Courier New', monospace;\n  font-size: 0.85rem;\n  pointer-events: none;\n`;\n\n// Cell renderer for text with hover tooltip\nconst TooltipCellRenderer = (props) => {\n  const fullText = props.value || '';\n  const displayText = fullText.length > 100 ? fullText.substring(0, 100) + '...' : fullText;\n  const [isHovering, setIsHovering] = useState(false);\n  \n  return (\n    <div \n      style={{ \n        whiteSpace: 'nowrap', \n        overflow: 'hidden', \n        textOverflow: 'ellipsis',\n        position: 'relative'\n      }}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n    >\n      {displayText}\n      <CustomTooltip style={{ \n        opacity: isHovering ? 1 : 0, \n        visibility: isHovering ? 'visible' : 'hidden'\n      }}>\n        {fullText}\n      </CustomTooltip>\n    </div>\n  );\n};\n\n// Cell renderer for action buttons with improved event handling\nconst ActionCellRenderer = (props) => {\n  // Create refs to store references to the buttons\n  const skipButtonRef = React.useRef(null);\n  const addButtonRef = React.useRef(null);\n  \n  React.useEffect(() => {\n    // Get the buttons from refs after render\n    const skipButton = skipButtonRef.current;\n    const addButton = addButtonRef.current;\n    \n    if (!skipButton || !addButton) return;\n    \n    // Function to handle skip button click with complete event isolation\n    const skipClickHandler = (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      \n      // Delay the actual action just to be sure all event bubbling is done\n      setTimeout(() => {\n        if (props.onSkip) {\n          props.onSkip(props.data);\n        }\n      }, 10);\n      \n      return false;\n    };\n    \n    // Function to handle add to CRM button click with complete event isolation\n    const addClickHandler = (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      \n      // Delay the actual action just to be sure all event bubbling is done\n      setTimeout(() => {\n        if (props.onAddToCRM) {\n          props.onAddToCRM(props.data);\n        }\n      }, 10);\n      \n      return false;\n    };\n    \n    // Add the click handlers to all buttons\n    skipButton.addEventListener('click', skipClickHandler, true);\n    addButton.addEventListener('click', addClickHandler, true);\n    \n    // Cleanup - remove handlers when component unmounts\n    return () => {\n      skipButton.removeEventListener('click', skipClickHandler, true);\n      addButton.removeEventListener('click', addClickHandler, true);\n    };\n  }, [props]);\n  \n  return (\n    <div\n      className=\"action-buttons-container\"\n      style={{ \n        display: 'flex', \n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingTop: '4px',\n        paddingBottom: '0px',\n        height: '100%'\n      }}\n      // This is critical - stop propagation at the container level too\n      onClick={(e) => { \n        e.stopPropagation(); \n        e.preventDefault();\n      }}\n    >\n      <div \n        ref={skipButtonRef}\n        style={{\n          backgroundColor: '#333',\n          color: '#ff5555',\n          border: '1px solid #ff5555',\n          borderRadius: '4px',\n          padding: '5px 10px',\n          margin: '0 8px',\n          cursor: 'pointer',\n          display: 'inline-flex',\n          alignItems: 'center',\n          gap: '6px',\n          fontSize: '12px',\n          height: '24px'\n        }}\n      >\n        <FiXCircle /> Spam\n      </div>\n      \n      <div \n        ref={addButtonRef}\n        style={{\n          backgroundColor: '#333',\n          color: '#55ff55',\n          border: '1px solid #55ff55',\n          borderRadius: '4px',\n          padding: '5px 10px',\n          margin: '0 8px',\n          cursor: 'pointer',\n          display: 'inline-flex',\n          alignItems: 'center',\n          gap: '6px',\n          fontSize: '12px',\n          height: '24px'\n        }}\n      >\n        <FiCheckCircle /> Add to CRM\n      </div>\n    </div>\n  );\n};\n\n// Contact Modal Component\nconst ContactModal = ({ contact, onClose, onSkip, onAddToCRM, onWorkflow }) => {\n  if (!contact) return null;\n  \n  // Format date for display\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Unknown';\n    const date = new Date(dateString);\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  \n  return (\n    <ModalOverlay onClick={onClose}>\n      <ModalContent onClick={(e) => e.stopPropagation()}>\n        <ModalHeader>\n          <ModalTitle>\n            <FiPhone style={{ marginRight: '10px' }} /> WhatsApp Contact Details\n          </ModalTitle>\n          <ModalCloseButton onClick={onClose}>×</ModalCloseButton>\n        </ModalHeader>\n        \n        <ModalBody>\n          <ContactDetails>\n            <ContactInfoItem>\n              <ContactInfoLabel>\n                <FiUser /> Name:\n              </ContactInfoLabel>\n              <ContactInfoValue>\n                {contact.first_name || ''} {contact.last_name || ''}\n              </ContactInfoValue>\n            </ContactInfoItem>\n            \n            <ContactInfoItem>\n              <ContactInfoLabel>\n                <FiUsers /> Group Chat:\n              </ContactInfoLabel>\n              <ContactInfoValue>\n                {contact.is_group_chat ? 'Yes' : 'No'}\n              </ContactInfoValue>\n            </ContactInfoItem>\n            \n            {contact.chat_name && (\n              <ContactInfoItem>\n                <ContactInfoLabel>\n                  <FiHash /> Chat Name:\n                </ContactInfoLabel>\n                <ContactInfoValue>\n                  {contact.chat_name}\n                </ContactInfoValue>\n              </ContactInfoItem>\n            )}\n            \n            <ContactInfoItem>\n              <ContactInfoLabel>\n                <FiMessageCircle /> Last Interaction:\n              </ContactInfoLabel>\n              <ContactInfoValue>\n                {contact.last_message || 'No recent interactions'}\n              </ContactInfoValue>\n            </ContactInfoItem>\n            \n            {contact.last_message_at && (\n              <ContactInfoItem>\n                <ContactInfoLabel>\n                  <FiCalendar /> Interaction Date:\n                </ContactInfoLabel>\n                <ContactInfoValue>\n                  {formatDate(contact.last_message_at)}\n                </ContactInfoValue>\n              </ContactInfoItem>\n            )}\n            \n          </ContactDetails>\n        </ModalBody>\n        \n        <ModalFooter>\n          <ActionButton \n            onClick={() => {\n              onSkip(contact);\n              onClose();\n            }}\n            color=\"#333\" \n            textColor=\"#ff5555\" \n            borderColor=\"#ff5555\"\n          >\n            <FiXCircle /> Spam\n          </ActionButton>\n          <ActionButton \n            onClick={() => {\n              onAddToCRM(contact);\n              onClose();\n            }}\n            color=\"#333\"\n            textColor=\"#55ff55\"\n            borderColor=\"#55ff55\"\n          >\n            <FiCheckCircle /> Add to CRM\n          </ActionButton>\n        </ModalFooter>\n      </ModalContent>\n    </ModalOverlay>\n  );\n};\n\nconst WhatsappInbox = () => {\n  const [contacts, setContacts] = useState([]);\n  const [spamNumbers, setSpamNumbers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [spamLoading, setSpamLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [spamError, setSpamError] = useState(null);\n  const [gridApi, setGridApi] = useState(null);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [spamLoaded, setSpamLoaded] = useState(false);\n  const [showGrid, setShowGrid] = useState(false);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [confirmSpam, setConfirmSpam] = useState(null);\n  const navigate = useNavigate();\n  \n  // Column definitions\n  const columnDefs = useMemo(() => [\n    { \n      headerName: 'Name', \n      valueGetter: params => {\n        if (!params.data) return '';\n        return `${params.data.first_name || ''} ${params.data.last_name || ''}`.trim() || 'Unknown';\n      },\n      minWidth: 150,\n      width: 150,\n      suppressSizeToFit: false,\n      cellRenderer: ContactCellRenderer,\n      filter: false,\n      sortable: true,\n    },\n    { \n      headerName: 'Group', \n      valueGetter: params => {\n        if (!params.data) return '';\n        if (params.data.is_group_chat) {\n          return params.data.chat_name || 'Group Chat';\n        } else {\n          return 'Individual';\n        }\n      },\n      minWidth: 180,\n      width: 180,\n      suppressSizeToFit: false,\n      cellRenderer: TooltipCellRenderer,\n      filter: false,\n      sortable: true,\n    },\n    { \n      headerName: 'Last Message', \n      field: 'last_message',\n      minWidth: 170,\n      width: 170,\n      valueGetter: (params) => {\n        if (!params.data || !params.data.last_message) return '';\n        const message = params.data.last_message;\n        return message.length > 50 ? message.substring(0, 50) + '...' : message;\n      },\n      cellRenderer: TooltipCellRenderer,\n      filter: false,\n      sortable: true,\n    },\n    {\n      headerName: 'Actions',\n      field: 'actions',\n      minWidth: 250,\n      width: 250,\n      cellRenderer: ActionCellRenderer,\n      cellRendererParams: {\n        onSkip: handleSpamClick,\n        onAddToCRM: handleAddToCRM\n      },\n      sortable: false,\n      filter: false,\n      suppressSizeToFit: false,\n      cellClass: 'action-cell-no-click'\n    }\n  ], []);\n  \n  // Default column properties\n  const defaultColDef = useMemo(() => ({\n    resizable: true,\n    sortable: true\n  }), []);\n  \n  // Auto group column definition\n  const autoGroupColumnDef = useMemo(() => ({\n    headerName: 'Group',\n    field: 'chat_name',\n    cellRenderer: 'agGroupCellRenderer',\n    cellRendererParams: {\n      suppressCount: true,\n    },\n    minWidth: 200,\n  }), []);\n\n  // Grid ready event handler\n  const onGridReady = React.useCallback((params) => {\n    console.log('Grid is ready');\n    setGridApi(params.api);\n    \n    // Wait for a tick to ensure grid is properly initialized\n    setTimeout(() => {\n      params.api.sizeColumnsToFit();\n    }, 0);\n  }, []);\n  \n  // Handle row click to show contact details modal\n  const handleRowClick = React.useCallback((event) => {\n    // Check if this is a click on the action buttons or name column\n    if (event.colDef && (event.colDef.headerName === 'Actions' || event.colDef.headerName === 'Name')) {\n      // Skip opening the modal when clicking these columns\n      return;\n    }\n    setSelectedContact(event.data);\n  }, []);\n\n  // Show spam confirmation modal\n  function handleSpamClick(contactData) {\n    console.log('Spam button clicked:', contactData);\n    setConfirmSpam(contactData);\n  }\n  \n  // Handle marking a contact as spam after confirmation\n  async function handleConfirmSpam() {\n    if (!confirmSpam) return;\n    \n    const contactData = confirmSpam;\n    try {\n      // Get the contact's mobile number\n      const { data: mobiles, error: mobilesError } = await supabase\n        .from('contact_mobiles')\n        .select('mobile_number')\n        .eq('contact_id', contactData.contact_id)\n        .limit(1);\n      \n      if (mobilesError) throw mobilesError;\n      \n      if (mobiles && mobiles.length > 0) {\n        // Add the mobile number to the whatsapp_spam table\n        const { error: spamError } = await supabase\n          .from('whatsapp_spam')\n          .upsert({ \n            mobile_number: mobiles[0].mobile_number,\n            counter: 1,\n            created_at: new Date().toISOString(),\n            last_modified_at: new Date().toISOString()\n          }, {\n            onConflict: 'mobile_number',\n            returning: 'minimal'\n          });\n        \n        if (spamError) throw spamError;\n      }\n      \n      // Update the contact record to mark it as processed\n      const { error } = await supabase\n        .from('contacts')\n        .update({ \n          category: 'Skip',\n          last_modified_at: new Date().toISOString(),\n          last_modified_by: 'User'\n        })\n        .eq('contact_id', contactData.contact_id);\n      \n      if (error) throw error;\n      \n      // Remove the contact from the displayed list\n      const updatedContacts = contacts.filter(contact => contact.contact_id !== contactData.contact_id);\n      setContacts(updatedContacts);\n      \n      // Check if we need to refresh the data\n      if (updatedContacts.length === 0) {\n        // Trigger a refresh to get more data\n        setDataLoaded(false);\n      }\n      \n      // Close the confirmation dialog\n      setConfirmSpam(null);\n      \n      console.log('Contact marked as spam:', contactData.contact_id);\n    } catch (err) {\n      console.error('Error marking contact as spam:', err);\n      // You could show an error toast here\n    }\n  }\n  \n  // Handle adding a contact to CRM\n  async function handleAddToCRM(contactData) {\n    console.log('Add to CRM clicked:', contactData);\n    try {\n      // Update the contact record to mark it with a different category\n      const { error } = await supabase\n        .from('contacts')\n        .update({ \n          category: 'Inbox',\n          last_modified_at: new Date().toISOString(),\n          last_modified_by: 'User'\n        })\n        .eq('contact_id', contactData.contact_id);\n      \n      if (error) throw error;\n      \n      // Remove the contact from the displayed list\n      const updatedContacts = contacts.filter(contact => contact.contact_id !== contactData.contact_id);\n      setContacts(updatedContacts);\n      \n      // Check if we need to refresh the data\n      if (updatedContacts.length === 0) {\n        // Trigger a refresh to get more data\n        setDataLoaded(false);\n      }\n      \n      console.log('Contact marked for normal CRM processing:', contactData.contact_id);\n    } catch (err) {\n      console.error('Error processing contact for CRM:', err);\n      // You could show an error toast here\n    }\n  }\n  \n  // Handle sending a contact to the workflow\n  function handleWorkflowClick(contactData) {\n    console.log('Workflow button clicked:', contactData);\n    if (!contactData || !contactData.contact_id) return;\n    \n    // Store contact ID in session storage for workflow\n    sessionStorage.setItem('workflow_contact_id', contactData.contact_id);\n    \n    // Navigate to the workflow page\n    navigate(`/contacts/workflow/${contactData.contact_id}`);\n  }\n  \n  // Handle click on spam number item\n  async function handleSpamNumberClick(spamNumber) {\n    console.log('Spam number clicked:', spamNumber);\n    try {\n      // Find a contact with this mobile number\n      const { data: mobilesData, error: mobilesError } = await supabase\n        .from('contact_mobiles')\n        .select('contact_id')\n        .eq('mobile_number', spamNumber.mobile_number)\n        .limit(1);\n      \n      if (mobilesError) throw mobilesError;\n      \n      if (mobilesData && mobilesData.length > 0) {\n        // Get the contact details\n        const { data: contactData, error: contactError } = await supabase\n          .from('contacts')\n          .select('*')\n          .eq('contact_id', mobilesData[0].contact_id)\n          .limit(1);\n        \n        if (contactError) throw contactError;\n        \n        if (contactData && contactData.length > 0) {\n          // Show the contact in the modal\n          setSelectedContact(contactData[0]);\n        }\n      } else {\n        // If no matching contact found, create a simplified version for display\n        setSelectedContact({\n          contact_id: `spam-${spamNumber.id || Date.now()}`,\n          first_name: 'Unknown',\n          last_name: 'Contact',\n          job_role: 'WhatsApp Spam',\n          description: `This number (${spamNumber.mobile_number}) has been marked as spam ${spamNumber.counter} times.`,\n          created_at: spamNumber.created_at || new Date().toISOString()\n        });\n      }\n    } catch (err) {\n      console.error('Error fetching contact details for spam number:', err);\n    }\n  }\n\n  // Fetch contacts from contacts table with chat and message info\n  const fetchContacts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // First, fetch the contacts with the WhatsApp category\n      const { data: contactsData, error: contactsError } = await supabase\n        .from('contacts')\n        .select('*')\n        .eq('category', 'WhatsApp Group Contact')\n        .order('created_at', { ascending: false });\n      \n      if (contactsError) throw contactsError;\n      \n      // If no contacts, set empty array and finish loading immediately\n      if (!contactsData || contactsData.length === 0) {\n        console.log('No WhatsApp contacts found');\n        setContacts([]);\n        setLoading(false);\n        setDataLoaded(true);\n        setShowGrid(true);\n        return;\n      }\n      \n      // Enhanced contacts array with group and message info\n      const enhancedContacts = [...contactsData];\n      \n      // Get all contact IDs\n      const contactIds = contactsData.map(contact => contact.contact_id);\n      \n      // Get chat associations for these contacts\n      const { data: chatLinks, error: chatLinksError } = await supabase\n        .from('contact_chats')\n        .select('contact_id, chat_id')\n        .in('contact_id', contactIds);\n        \n      if (chatLinksError) throw chatLinksError;\n      \n      // If we have chat links, get the chat information\n      if (chatLinks && chatLinks.length > 0) {\n        // Get all chat IDs\n        const chatIds = chatLinks.map(link => link.chat_id).filter(Boolean);\n        \n        if (chatIds.length > 0) {\n          // Get chat data\n          const { data: chatsData, error: chatsError } = await supabase\n            .from('chats')\n            .select('id, chat_name, is_group_chat')\n            .in('id', chatIds);\n            \n          if (chatsError) throw chatsError;\n          \n          // Create a lookup map for chats\n          const chatsMap = {};\n          if (chatsData) {\n            chatsData.forEach(chat => {\n              chatsMap[chat.id] = chat;\n            });\n          }\n          \n          // Create a lookup map for contact to chat relationship\n          const contactChatMap = {};\n          chatLinks.forEach(link => {\n            if (link.contact_id && link.chat_id) {\n              contactChatMap[link.contact_id] = link.chat_id;\n            }\n          });\n          \n          // Enhance contacts with chat data\n          enhancedContacts.forEach(contact => {\n            const chatId = contactChatMap[contact.contact_id];\n            const chatInfo = chatId ? chatsMap[chatId] : null;\n            \n            if (chatInfo) {\n              contact.is_group_chat = chatInfo.is_group_chat || false;\n              contact.chat_name = chatInfo.chat_name || '';\n              // Add chat_id for grouping\n              contact.chat_id = chatId;\n              // Add group info for ag-grid grouping\n              contact.group = chatInfo.chat_name || 'Unknown Group';\n            } else {\n              contact.is_group_chat = false;\n              contact.chat_name = '';\n              contact.chat_id = null;\n              contact.group = 'Individual Chats';\n            }\n            \n            // For now, use placeholder for last message\n            contact.last_message = \"\"; // We'll update this later if possible\n          });\n          \n          // Get the last interactions for each contact\n          try {\n            // Fetch the latest interaction for each contact from interactions table\n            const { data: interactionsData, error: interactionsError } = await supabase\n              .from('interactions')\n              .select('contact_id, summary, interaction_date')\n              .in('contact_id', contactIds)\n              .in('chat_id', chatIds)\n              .order('interaction_date', { ascending: false });\n              \n            if (!interactionsError && interactionsData && interactionsData.length > 0) {\n              console.log(`Successfully fetched ${interactionsData.length} interactions`);\n              \n              // Create a map of latest interaction per contact\n              const lastInteractionByContactId = {};\n              interactionsData.forEach(interaction => {\n                if (!lastInteractionByContactId[interaction.contact_id] || \n                    new Date(interaction.interaction_date) > new Date(lastInteractionByContactId[interaction.contact_id].interaction_date)) {\n                  lastInteractionByContactId[interaction.contact_id] = interaction;\n                }\n              });\n              \n              // Add last interaction summaries to contacts\n              enhancedContacts.forEach(contact => {\n                const lastInteraction = lastInteractionByContactId[contact.contact_id];\n                \n                if (lastInteraction) {\n                  contact.last_message = lastInteraction.summary || '';\n                  contact.last_message_at = lastInteraction.interaction_date || null;\n                } else {\n                  contact.last_message = 'No recent interactions';\n                }\n              });\n            } else {\n              console.log('No interactions found or error fetching interactions');\n              enhancedContacts.forEach(contact => {\n                contact.last_message = 'No interactions found';\n              });\n            }\n          } catch (interactionErr) {\n            // If we can't get interactions, just continue with the contacts we have\n            console.error('Error fetching interactions:', interactionErr);\n            enhancedContacts.forEach(contact => {\n              contact.last_message = 'Error retrieving interactions';\n            });\n          }\n        }\n      }\n      \n      // Group contacts by chat_name for better organization\n      const organizedContacts = [...enhancedContacts];\n      \n      // Sort contacts: first by group/chat name, then by person name within each group\n      organizedContacts.sort((a, b) => {\n        // First sort by group/chat name\n        const aGroupName = a.chat_name || '';\n        const bGroupName = b.chat_name || '';\n        \n        if (aGroupName !== bGroupName) {\n          return aGroupName.localeCompare(bGroupName);\n        }\n        \n        // Then sort by contact name within the same group\n        const aName = `${a.first_name || ''} ${a.last_name || ''}`.trim();\n        const bName = `${b.first_name || ''} ${b.last_name || ''}`.trim();\n        return aName.localeCompare(bName);\n      });\n      \n      console.log(`Successfully processed ${organizedContacts.length} WhatsApp contacts grouped by chat`);\n      \n      setContacts(organizedContacts);\n      setLoading(false);\n      setDataLoaded(true);\n      \n      // Delay showing the grid to avoid abrupt transitions\n      setTimeout(() => {\n        setShowGrid(true);\n      }, 800);\n    } catch (err) {\n      console.error('Error fetching WhatsApp contacts:', err);\n      setError(err?.message || 'Unknown error');\n      setLoading(false);\n    }\n  };\n\n  // Fetch spam numbers from whatsapp_spam table\n  const fetchSpamNumbers = async () => {\n    try {\n      setSpamLoading(true);\n      setSpamError(null);\n      \n      // Fetch the last 25 spam numbers ordered by last_modified_at\n      const { data, error } = await supabase\n        .from('whatsapp_spam')\n        .select('*')\n        .order('last_modified_at', { ascending: false })\n        .limit(25);\n      \n      if (error) throw error;\n      \n      console.log(`Successfully fetched ${data?.length || 0} WhatsApp spam numbers`);\n      \n      setSpamNumbers(data || []);\n      setSpamLoading(false);\n      setSpamLoaded(true);\n    } catch (err) {\n      console.error('Error fetching WhatsApp spam numbers:', err);\n      setSpamError(err.message);\n      setSpamLoading(false);\n    }\n  };\n\n  // Fetch data on component mount\n  useEffect(() => {\n    // Only fetch if data hasn't been loaded yet\n    if (!dataLoaded) {\n      console.log('Initiating WhatsApp contacts data fetch');\n      fetchContacts();\n    }\n    \n    // Fetch spam numbers independently\n    if (!spamLoaded) {\n      console.log('Initiating WhatsApp spam numbers fetch');\n      fetchSpamNumbers();\n    }\n  }, [dataLoaded, spamLoaded]);\n  \n  // Handle window resize\n  useEffect(() => {\n    // Only add resize handler if gridApi exists\n    if (!gridApi) return;\n    \n    const handleResize = () => {\n      gridApi.sizeColumnsToFit();\n    };\n    \n    // Use the resize event with options object (passive: true)\n    window.addEventListener('resize', handleResize, { passive: true });\n    \n    // Clean up event listener\n    return () => {\n      window.removeEventListener('resize', handleResize, { passive: true });\n    };\n  }, [gridApi]);\n\n  return (\n    <Container>\n      {/* Contact details modal */}\n      {selectedContact && (\n        <ContactModal \n          contact={selectedContact}\n          onClose={() => setSelectedContact(null)}\n          onSkip={handleSpamClick}\n          onAddToCRM={handleAddToCRM}\n          onWorkflow={handleWorkflowClick}\n        />\n      )}\n      \n      {/* Spam confirmation modal */}\n      {confirmSpam && (\n        <ModalOverlay onClick={() => setConfirmSpam(null)}>\n          <ModalContent \n            onClick={(e) => e.stopPropagation()}\n            style={{ maxWidth: '400px', padding: '20px' }}\n          >\n            <ModalHeader>\n              <ModalTitle>\n                <FiXCircle style={{ marginRight: '10px', color: '#ff5555' }} /> Confirm Spam\n              </ModalTitle>\n              <ModalCloseButton onClick={() => setConfirmSpam(null)}>×</ModalCloseButton>\n            </ModalHeader>\n            \n            <ModalBody>\n              <p style={{ marginBottom: '20px' }}>\n                Are you sure you want to mark this contact as spam?\n              </p>\n              <div style={{ \n                backgroundColor: '#1a1a1a', \n                padding: '10px', \n                borderRadius: '4px',\n                marginBottom: '20px' \n              }}>\n                <p><strong>Name:</strong> {`${confirmSpam.first_name || ''} ${confirmSpam.last_name || ''}`.trim() || 'Unknown'}</p>\n              </div>\n            </ModalBody>\n            \n            <ModalFooter>\n              <ActionButton \n                onClick={() => setConfirmSpam(null)}\n                color=\"#333\" \n                textColor=\"#cccccc\" \n                borderColor=\"#555\"\n              >\n                Cancel\n              </ActionButton>\n              <ActionButton \n                onClick={handleConfirmSpam}\n                color=\"#333\"\n                textColor=\"#ff5555\"\n                borderColor=\"#ff5555\"\n              >\n                <FiXCircle /> Mark as Spam\n              </ActionButton>\n            </ModalFooter>\n          </ModalContent>\n        </ModalOverlay>\n      )}\n      \n      {/* Sidebar for Spam Numbers */}\n      <SidebarContainer>\n        <SidebarTitle>Spam Numbers</SidebarTitle>\n        \n        {spamLoading ? (\n          <div style={{ padding: '10px', color: '#00ff00', textAlign: 'center', fontSize: '0.75rem' }}>\n            Loading...\n          </div>\n        ) : spamError ? (\n          <ErrorText style={{ fontSize: '0.75rem', padding: '8px' }}>Error: {spamError}</ErrorText>\n        ) : spamNumbers.length === 0 ? (\n          <div style={{ padding: '10px', color: '#cccccc', textAlign: 'center', fontSize: '0.75rem' }}>\n            No spam numbers\n          </div>\n        ) : (\n          <SpamList>\n            {spamNumbers.map((spam, index) => (\n              <SpamItem \n                key={index} \n                onClick={() => handleSpamNumberClick(spam)}\n              >\n                <SpamNumber>\n                  {spam.mobile_number && spam.mobile_number.length > 40 \n                    ? `${spam.mobile_number.substring(0, 40)}...` \n                    : spam.mobile_number}\n                </SpamNumber>\n                <SpamCounter>\n                  {spam.counter || 1}\n                </SpamCounter>\n              </SpamItem>\n            ))}\n          </SpamList>\n        )}\n      </SidebarContainer>\n      \n      {/* Main Content - WhatsApp Contacts */}\n      <MainContainer>\n        {error && <ErrorText>Error: {error}</ErrorText>}\n        \n        {loading !== false ? (\n          <LoadingContainer>\n            <LoadingText>\n              {typeof loading === 'string' \n                ? loading \n                : 'Accessing WhatsApp Contacts...'}\n            </LoadingText>\n            <LoadingBar />\n            <LoadingMatrix />\n          </LoadingContainer>\n        ) : !showGrid && !error ? (\n          <LoadingContainer>\n            <LoadingText>Preparing interface...</LoadingText>\n            <LoadingBar />\n            <LoadingMatrix />\n          </LoadingContainer>\n        ) : contacts.length === 0 && !error ? (\n          <div style={{ \n            padding: '40px', \n            textAlign: 'center',\n            color: '#00ff00',\n            background: '#121212',\n            borderRadius: '8px',\n            fontSize: '24px',\n            fontWeight: 'bold',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '300px'\n          }}>\n            <div style={{ marginBottom: '15px' }}>No more WhatsApp contacts to process 😊</div>\n            <div style={{ fontSize: '48px', marginBottom: '20px' }}>✓</div>\n            <div style={{ fontSize: '14px', color: '#aaa', marginTop: '10px' }}>\n              Click <span style={{ textDecoration: 'underline', cursor: 'pointer', color: '#00ff00' }} onClick={() => setDataLoaded(false)}>here</span> to check for new contacts\n            </div>\n          </div>\n        ) : (\n          <div \n            className=\"ag-theme-alpine\" \n            style={{ \n              height: 'calc(100vh - 120px)',\n              width: 'calc(100% - 15px)',\n              overflow: 'auto',\n              margin: '15px 0 0 0',\n              marginTop: '30px',\n              opacity: showGrid ? 1 : 0,\n              transition: 'opacity 0.5s ease-in-out',\n              '--ag-background-color': '#121212',\n              '--ag-odd-row-background-color': '#1a1a1a',\n              '--ag-header-background-color': '#222222',\n              '--ag-header-foreground-color': '#00ff00',\n              '--ag-foreground-color': '#e0e0e0', \n              '--ag-row-hover-color': '#2a2a2a',\n              '--ag-border-color': '#333333'\n            }}\n          >\n            <AgGridReact\n              rowData={contacts}\n              columnDefs={columnDefs}\n              defaultColDef={defaultColDef}\n              autoGroupColumnDef={autoGroupColumnDef}\n              onGridReady={onGridReady}\n              rowSelection=\"single\"\n              animateRows={true}\n              pagination={true}\n              paginationPageSize={100}\n              suppressCellFocus={true}\n              enableCellTextSelection={true}\n              rowHeight={42}\n              domLayout=\"autoHeight\"\n              paginationAutoPageSize={true}\n              sortingOrder={['desc', 'asc', null]}\n              onRowClicked={handleRowClick}\n              rowGroupPanelShow='never'\n              groupDefaultExpanded={-1}\n              groupDisplayType='groupRows'\n              rowStyle={params => {\n                // Apply alternating styles based on groups\n                const groupName = params.data?.chat_name || '';\n                let backgroundIntensity = '';\n                \n                if (groupName) {\n                  // Calculate a simple hash for the group name to use for intensity\n                  const hash = groupName.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n                  const intensity = hash % 3; // 0, 1, or 2\n                  backgroundIntensity = intensity === 0 ? '1a' : intensity === 1 ? '22' : '2a'; \n                }\n                \n                return { \n                  cursor: 'pointer',\n                  backgroundColor: groupName ? `#${backgroundIntensity}1a${backgroundIntensity}a` : '',\n                };\n              }}\n              getRowId={params => params.data.contact_id}\n              groupRowRendererParams={{\n                suppressCount: true,\n                innerRenderer: params => {\n                  return `<span style=\"font-weight: bold; color: #00ff00;\">${params.node.key}</span> (${params.node.allChildrenCount} contacts)`;\n                }\n              }}\n              rowGroupingColumnHidingStrategy='hide'\n              groupIncludeFooter={false}\n              groupRemoveSingleChildren={false}\n              rowData={contacts}\n              rowGroupingAutoColumn={true}\n              rowGroupColumns={['group']}\n            />\n          </div>\n        )}\n      </MainContainer>\n    </Container>\n  );\n};\n\nexport default WhatsappInbox;"],"names":["Container","styled","div","SidebarContainer","MainContainer","SidebarTitle","h3","SpamList","SpamItem","SpamNumber","span","SpamCounter","ErrorText","LoadingContainer","LoadingBar","LoadingText","LoadingMatrix","ActionButton","button","props","color","textColor","borderColor","ModalOverlay","ModalContent","ModalHeader","ModalTitle","ModalCloseButton","ModalBody","ModalFooter","ContactDetails","ContactInfoItem","ContactInfoLabel","ContactInfoValue","ContactCellRenderer","_props$data","contactName","value","contactId","data","contact_id","displayName","length","substring","_jsx","style","fontSize","cursor","textDecoration","onClick","e","stopPropagation","sessionStorage","setItem","window","location","href","className","title","children","CustomTooltip","TooltipCellRenderer","fullText","displayText","isHovering","setIsHovering","useState","_jsxs","whiteSpace","overflow","textOverflow","position","onMouseEnter","onMouseLeave","opacity","visibility","ActionCellRenderer","skipButtonRef","React","addButtonRef","skipButton","current","addButton","skipClickHandler","preventDefault","stopImmediatePropagation","setTimeout","onSkip","addClickHandler","onAddToCRM","addEventListener","removeEventListener","display","justifyContent","alignItems","paddingTop","paddingBottom","height","ref","backgroundColor","border","borderRadius","padding","margin","gap","FiXCircle","FiCheckCircle","ContactModal","_ref","contact","onClose","onWorkflow","FiPhone","marginRight","FiUser","first_name","last_name","FiUsers","is_group_chat","chat_name","FiHash","FiMessageCircle","last_message","last_message_at","FiCalendar","dateString","Date","toLocaleString","year","month","day","hour","minute","formatDate","WhatsappInbox","contacts","setContacts","spamNumbers","setSpamNumbers","loading","setLoading","spamLoading","setSpamLoading","error","setError","spamError","setSpamError","gridApi","setGridApi","dataLoaded","setDataLoaded","spamLoaded","setSpamLoaded","showGrid","setShowGrid","selectedContact","setSelectedContact","confirmSpam","setConfirmSpam","navigate","useNavigate","columnDefs","useMemo","headerName","valueGetter","params","trim","minWidth","width","suppressSizeToFit","cellRenderer","filter","sortable","field","message","cellRendererParams","handleSpamClick","handleAddToCRM","cellClass","defaultColDef","resizable","autoGroupColumnDef","suppressCount","onGridReady","console","log","api","sizeColumnsToFit","handleRowClick","event","colDef","contactData","async","supabase","from","update","category","last_modified_at","toISOString","last_modified_by","eq","updatedContacts","err","useEffect","contactsData","contactsError","select","order","ascending","enhancedContacts","contactIds","map","chatLinks","chatLinksError","in","chatIds","link","chat_id","Boolean","chatsData","chatsError","chatsMap","forEach","chat","id","contactChatMap","chatId","chatInfo","group","interactionsData","interactionsError","lastInteractionByContactId","interaction","interaction_date","lastInteraction","summary","interactionErr","organizedContacts","sort","a","b","aGroupName","bGroupName","localeCompare","aName","bName","fetchContacts","limit","fetchSpamNumbers","handleResize","passive","maxWidth","marginBottom","mobiles","mobilesError","upsert","mobile_number","counter","created_at","onConflict","returning","textAlign","spam","index","spamNumber","mobilesData","contactError","now","job_role","description","handleSpamNumberClick","marginTop","transition","AgGridReact","rowData","rowSelection","animateRows","pagination","paginationPageSize","suppressCellFocus","enableCellTextSelection","rowHeight","domLayout","paginationAutoPageSize","sortingOrder","onRowClicked","rowGroupPanelShow","groupDefaultExpanded","groupDisplayType","rowStyle","_params$data","groupName","backgroundIntensity","intensity","split","reduce","acc","char","charCodeAt","getRowId","groupRowRendererParams","innerRenderer","node","key","allChildrenCount","rowGroupingColumnHidingStrategy","groupIncludeFooter","groupRemoveSingleChildren","rowGroupingAutoColumn","rowGroupColumns","background","fontWeight","flexDirection"],"sourceRoot":""}